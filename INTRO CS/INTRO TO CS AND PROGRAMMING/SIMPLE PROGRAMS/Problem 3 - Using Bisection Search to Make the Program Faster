# We are searching for the smallest monthly payment such that we can pay off the entire balance within a year.
# Write a program that uses bisection search to find the smallest monthly payment to the cent (no more multiples of $10) such that we can pay off the debt within a year.

balance = 320000
initialBalance = balance
annualInterestRate = 0.2
monthlyInterestRate = annualInterestRate / 12
epsilon = 0.05

def payBalance(balance, t):
 # setting boundaries for bisection search
 lowerBound = balance / 12
 upperBound = (balance * (1 + annualInterestRate / 12) ** 12) / 12
 # absolute value to avoid having problems with negative numbers since they're less than 0 but not optimal for this calculation
 while abs(balance) > epsilon:
  # resetting the balance and making the guess for bisection search
  balance = initialBalance
  monthlyPayment = (lowerBound + upperBound) / 2
  # calculating the balance with the guess
  for money in range(t):
    balance = balance - monthlyPayment
    balance = balance + (balance * monthlyInterestRate)
  # changing the boundaries or returning the guess if the balance is less than epsilon
  if balance > epsilon:
    lowerBound = monthlyPayment
  elif abs(balance) < epsilon:
    return monthlyPayment
  else:
    upperBound = monthlyPayment

print(round((payBalance(balance, 12)), 2))
