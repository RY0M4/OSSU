# Fill in the build_shift_dict(self, shift) method of the Message class. 
# Be sure that your dictionary includes both lower and upper case letters, but that the shifted character for a lower case letter and its uppercase version are lower and upper case instances of the same letter. 
# What this means is that if the original letter is "a" and its shifted value is "c", the letter "A" should shift to the letter "C".
# Fill in the apply_shift(self, shift) method of the Message class.
# Characters such as the space character, commas, periods, exclamation points, etc will not be encrypted by this cipher - basically, all the characters within string.punctuation, plus the space (' ') and all numerical characters (0 - 9) found in string.digits.

import string

### DO NOT MODIFY THIS FUNCTION ###
def load_words(file_name):
    '''
    file_name (string): the name of the file containing 
    the list of words to load    
    
    Returns: a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    '''
    print('Loading word list from file...')
    # inFile: file
    in_file = open(file_name, 'r')
    # line: string
    line = in_file.readline()
    # word_list: list of strings
    word_list = line.split()
    print('  ', len(word_list), 'words loaded.')
    in_file.close()
    return word_list

### DO NOT MODIFY THIS FUNCTION ###
def is_word(word_list, word):
    '''
    Determines if word is a valid word, ignoring
    capitalization and punctuation

    word_list (list): list of words in the dictionary.
    word (string): a possible word.
    
    Returns: True if word is in word_list, False otherwise

    Example:
    >>> is_word(word_list, 'bat') returns
    True
    >>> is_word(word_list, 'asdf') returns
    False
    '''
    word = word.lower()
    word = word.strip(" !@#$%^&*()-_+={}[]|\:;'<>?,./\"")
    return word in word_list

### DO NOT MODIFY THIS FUNCTION ###
def get_story_string():
    """
    Returns: a joke in encrypted text.
    """
    f = open("story.txt", "r")
    story = str(f.read())
    f.close()
    return story

WORDLIST_FILENAME = 'words.txt'

class Message(object):
    ### DO NOT MODIFY THIS METHOD ###
    def __init__(self, text):
        '''
        Initializes a Message object
                
        text (string): the message's text

        a Message object has two attributes:
            self.message_text (string, determined by input text)
            self.valid_words (list, determined using helper function load_words
        '''
        self.message_text = text
        self.valid_words = load_words(WORDLIST_FILENAME)

    ### DO NOT MODIFY THIS METHOD ###
    def get_message_text(self):
        '''
        Used to safely access self.message_text outside of the class
        
        Returns: self.message_text
        '''
        return self.message_text

    ### DO NOT MODIFY THIS METHOD ###
    def get_valid_words(self):
        '''
        Used to safely access a copy of self.valid_words outside of the class
        
        Returns: a COPY of self.valid_words
        '''
        return self.valid_words[:]
        
    def build_shift_dict(self, shift):
        '''
        Creates a dictionary that can be used to apply a cipher to a letter.
        The dictionary maps every uppercase and lowercase letter to a
        character shifted down the alphabet by the input shift. The dictionary
        should have 52 keys of all the uppercase letters and all the lowercase
        letters only.        
        
        shift (integer): the amount by which to shift every letter of the 
        alphabet. 0 <= shift < 26

        Returns: a dictionary mapping a letter (string) to 
                 another letter (string). 
        '''
        shiftDict = {}
        lowerAlphabet = list(string.ascii_lowercase)
        lowerAlphabetCopy = list(string.ascii_lowercase)
        upperAlphabet = list(string.ascii_uppercase)
        upperAlphabetCopy = list(string.ascii_uppercase)
        for number in range(len(lowerAlphabet)):
            # greater than 25 because python starts indexing from 0
            if number + shift > 25:
                # we can't go past 25 because otherwise we would incur in an out of index error
                # so 24 + 4 = (24 + 4) - 26 since we're looping through the alphabet
                lowerAlphabet[number] = lowerAlphabetCopy[(number + shift) - 26]
            else:
                lowerAlphabet[number] = lowerAlphabetCopy[number + shift]  
        for number in range(len(upperAlphabet)):
            if number + shift > 25:
                upperAlphabet[number] = upperAlphabetCopy[(number + shift) - 26]
            else:
                upperAlphabet[number] = upperAlphabetCopy[number + shift]
        completeAlphabet = lowerAlphabet + upperAlphabet
        completeAlphabetCopy = lowerAlphabetCopy + upperAlphabetCopy
        shiftDict = dict.fromkeys(completeAlphabetCopy)
        n = 0
        for key in shiftDict.keys():
            shiftDict[key] = completeAlphabet[n]
            n += 1
        return shiftDict     
        
    def apply_shift(self, shift):
        '''
        Applies the Caesar Cipher to self.message_text with the input shift.
        Creates a new string that is self.message_text shifted down the
        alphabet by some number of characters determined by the input shift        
        
        shift (integer): the shift with which to encrypt the message.
        0 <= shift < 26

        Returns: the message text (string) in which every character is shifted
             down the alphabet by the input shift
        '''
        shiftDict = Message.build_shift_dict(self, shift)
        shiftedMessage = ""
        for character in self.message_text:
            if character in string.punctuation or character in string.digits:
                shiftedMessage += character
                continue
            elif character == " ":
                shiftedMessage += character
                continue
            else:
                shiftedMessage += shiftDict[character]
        return shiftedMessage
        
x = Message("hello")

print(x.apply_shift(3))

x = Message("hello, how are you?")

print(x.apply_shift(5))

x = Message("In three words I can sum up everything I've learned about life: it goes on.")

print(x.apply_shift(12)) 
