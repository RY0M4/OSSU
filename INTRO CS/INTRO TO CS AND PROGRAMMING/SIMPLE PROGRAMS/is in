# We can use the idea of bisection search to determine if a character is in a string, so long as the string is sorted in alphabetical order.
# First, test the middle character of a string against the character you're looking for (the "test character"). 
# If they are the same, we are done - we've found the character we're looking for!
# If they're not the same, check if the test character is "smaller" than the middle character. 
# If so, we need only consider the lower half of the string; otherwise, we only consider the upper half of the string.
# Implement the function isIn(char, aStr) which implements the above idea recursively to test if char is in aStr.
# The variable char will be a single character and aStr will be a string that is in alphabetical order.
# The function should return a boolean value.

def isIn(char, aStr):
    '''
    char: a single character
    aStr: an alphabetized string
    
    returns: True if char is in aStr; False otherwise
    '''
    if aStr == '':
     return False
     
    if len(aStr) == 1:
     return char == aStr
    
    midIndex = len(aStr)//2
    middlechar = aStr[midIndex] 
    
    if char == middlechar:
     return True
    
    elif char < middlechar:
     return isIn(char, aStr[:midIndex])
     
    elif char > middlechar:
     return isIn(char, aStr[midIndex+1:])
     
print(isIn('a', ''))
print(isIn('q', 'i'))
print(isIn('u', 'ehhnps'))
print(isIn('x', 'acddfimnprsxz'))
